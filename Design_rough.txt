A master-slave system where a master is just another slave with a mask. A slave recognizes resources attached to his device, reports to the master. The master keeps knowledge of resources for the slaves. The master also acts like a virtual routing function to route calls to slaves that are best placed to solve a task (coming either from an application running above, or otherwise generated from other slaves).

(this is reading like a Lords system of the Great Britain.. hmm.. they did rule for long. let's see)

=======
Slaves
=======
A slave provides services based on task SLA - best effort, reliable and secure etc. A slave has full control over a device's resources - well, full enough to meet the task's SLA it is performing. That could mean a slave is an elevated access process on an existing kernel or the kernel itself. Essentially, the slave should not be blocked out when wanting to perform tasks allotted by the master.

======
Master
======
A master is a slave that performs the additional task of routing tasks and maintaining persistent state. It provides an API for applications on top along with a state of resource knowledge. The applications can then allot tasks to the master (the granularity of which is yet to be determined). 


=================
Choosing a Master
=================
If there is only 1 slave, he is the master of himself. In case of two or more slaves, the one that came first is the master.



=================
Where's the rest?
=================
Well, I like to make things up as I go.
